pyinstaller --onefile --windowed \
    --hidden-import tmzdata \
    --icon="images/icons8-home-40.ico" \
    --add-data "images/icons8-home-80.png:./images" \
    --name "Home Reminders" \
    home_reminders.py


security find-identity -p basic -v

codesign --deep --force --options=runtime --entitlements ./entitlements.plist --sign "CE9A89DA681F5F90591D9D8F07C1488D9FF36D7E" --timestamp ./dist/"Home Reminders"

codesign --deep --force --options=runtime --entitlements ./entitlements.plist --sign "Developer ID Application: Lawrence Schoch (SS8V2GBLP4)" --timestamp PDF_renamer

ditto ./dist ./tmp

productbuild --identifier "com.Home Reminders.pkg" --sign "Developer ID Installer: Lawrence Schoch (SS8V2GBLP4)" --timestamp --root ./tmp /Applications "Home Reminders.pkg"

check if pkg is signed:
/usr/sbin/spctl --assess --ignore-cache --verbose --type install PDF_renamer.pkg

xcrun notarytool history --keychain-profile "MyNotarizationCredentials"

xcrun notarytool submit --keychain-profile "MyNotarizationCredentials" --wait ./"Home Reminders.pkg"

xcrun notarytool log --keychain-profile "MyNotarizationCredentials" 7fc3503c-aedb-4fb5-8402-53d31d8d1298

xcrun stapler staple "Home Reminders.pkg"

hdiutil create  -srcfolder ./dist/"Home Reminders.app" "Home Reminders.dmg"
hdiutil create  -srcfolder ./dist/PDF_renamer PDF_renamer.dmg

cp -fR PDF_renamer.pkg ../../Downloads

def cancel():
                    num_window.destroy()

                def submit():
                    num = entry.get()
                    no_options_selected = (
                        var1.get() == 0 and var2.get() == 0 and var3.get() == 0
                    )
                    # validate the entered phone number
                    if not num.isnumeric() or len(num) > 10 or len(num) < 10:
                        messagebox.showinfo(
                            message="Must be a ten digit numeric."
                        )
                        num_window.focus_set()
                        entry.focus_set()
                    # require at least one "when" option
                    elif no_options_selected:
                        txt = (
                            "Please select at least one option for when "
                            + "to be notified."
                        )
                        messagebox.showinfo(message=txt)
                        num_window.focus_set()
                    else:
                        values = (
                            num,  # phone number
                            var1.get(),  # week before
                            var2.get(),  # day before
                            var3.get(),  # day of
                            # last notification date:
                            datetime.strftime(date.today(), "%Y-%m-%d"),
                        )
                        cur.execute("DELETE FROM user")
                        cur.execute(
                            """INSERT INTO user (
                            phone_number,
                            week_before,
                            day_before,
                            day_of,
                            last_notification_date) VALUES(?, ?, ?, ?, ?)""",
                            values,
                        )
                        con.commit()
                        num_window.destroy()
                        messagebox.showinfo(
                            message="You have opted to start receiving"
                            + " text notifications."
                        )

                num_window = tk.Toplevel(self)
                num_window.geometry("300x185+600+300")
                num_window.grid_columnconfigure(0, weight=1)
                num_window.grid_columnconfigure(1, weight=1)
                ttk.Label(
                    num_window,
                    text="Enter your ten digit phone number:",
                    anchor="center",
                    background="#ececec",
                    font=("Helvetica", 13),
                ).grid(row=0, column=0, columnspan=2, pady=(15, 7))
                num_var = tk.StringVar(num_window)
                entry = ttk.Entry(
                    num_window, textvariable=num_var, font=("Helvetica", 13)
                )
                entry.grid(row=1, column=0, columnspan=2)

                ttk.Label(
                    num_window,
                    text="Notify when? Select all that apply:",
                    anchor="center",
                    background="#ececec",
                    font=("Helvetica", 13),
                ).grid(row=2, column=0, columnspan=2, pady=(18, 2))

                var1 = tk.IntVar()
                var2 = tk.IntVar()
                var3 = tk.IntVar()
                c1 = tk.Checkbutton(
                    num_window,
                    text="Week before",
                    font=("Helvetica", 12),
                    variable=var1,
                    onvalue=1,
                    offvalue=0,
                )
                c1.grid(
                    row=3, column=0, columnspan=2, padx=(20, 0), sticky="w"
                )

                c2 = tk.Checkbutton(
                    num_window,
                    text="Day before",
                    font=("Helvetica", 12),
                    variable=var2,
                    onvalue=1,
                    offvalue=0,
                )
                c2.grid(
                    row=3,
                    column=0,
                    columnspan=2,
                    padx=(25, 0),
                )

                c3 = tk.Checkbutton(
                    num_window,
                    text="Day of",
                    font=("Helvetica", 12),
                    variable=var3,
                    onvalue=1,
                    offvalue=0,
                )
                c3.grid(
                    row=3, column=0, columnspan=2, padx=(0, 25), sticky="e"
                )

                tk.Button(num_window, text="Submit", command=submit).grid(
                    row=4, column=0, padx=(0, 5), pady=15, sticky="e"
                )
                tk.Button(num_window, text="Cancel", command=cancel).grid(
                    row=4, column=1, padx=(5, 0), pady=15, sticky="w"
                )
                entry.focus_set()